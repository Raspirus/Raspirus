import Head from 'next/head';
import SettingComp from '../../components/SettingsCard';
import { useRouter } from 'next/router';
import { invoke } from "@tauri-apps/api/tauri";
import { listen } from '@tauri-apps/api/event';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faFileLines, faUserNinja, faWrench, faHome, faGears,
        faLink, faDatabase, faFileZipper, faFingerprint, faHistory } from '@fortawesome/free-solid-svg-icons';
import React, { useState, useEffect, useRef, use } from 'react';
import Swal from 'sweetalert2';
import withReactContent from 'sweetalert2-react-content';
import { useTranslation } from 'next-i18next';
import { getStaticPaths, makeStaticProps } from '../../lib/getStatic';
import { open } from '@tauri-apps/api/dialog';
import IgnoredHashComp from '../../components/IgnoredHashes';


/**
 * Function that generates the necessary static paths and props manually
 * This is to fix an issue with next18 translations
 */
const getStaticProps = makeStaticProps('common')
export { getStaticPaths, getStaticProps }

/**
 * Represents the settings page, a list of Material cards where the user can manage some simple settings
 * for the app. Each setting has its own card generated by the SettingComponent.
 * @returns A full HTML page
 */
export default function Settings() {
  const router = useRouter();
  const { t } = useTranslation('common');
  // Data for some of the settings is retrieved directly from the backend and saved back to it
  const [hash_count, setCount] = useState(0);
  const [updated_date, setDate] = useState(t('update_db_status_1'));
  const [unformatted_date, setUnformattedDate] = useState("");
  const [logging, setLogging] = useState(false);
  const [obfuscated, setObfuscated] = useState(false);
  const [use_db_path, setUsedbPath] = useState(false);
  const [custom_db_path, setCustomDbPath] = useState("");
  const [scan_dir, setScanDir] = useState(false);
  const [ignored_hashes, setIgnoredHashes] = useState([]);
  const [mirror, setMirror] = useState("");
  // DB Update progress
  const [progress, setProgress] = useState(0);
  const progressRef = useRef(progress);
  const [title, setTitle] = useState(t('loading_title'));
  const titleRef = useRef(title);
  const [showProg, setShowProg] = useState(false);
  const showProgRef = useRef(showProg);

  // When the user goes back to the Home page, an update of the set settings
  // is sent to the backend, which then saves it in a local file
  const backHome = () => {
    if (updated_date == t('update_db_status_1')) {
      setDate("Never");
    }
    saveSettings();
    router.push('/');
  };

  /* 
  * This function allows users to use a custom path for the DB file.
  * The default state of the button is OFF, once cliked, the user opens a file picker.
  * In the file picker, the user can select the db path and the button switches to ON.
  * If nothing is selected, the button remains OFF. Once the button is in the ON state,
  * if clicked again it switches back to OFF.
  */
  async function handleSetCustomDBPath() {
    if (use_db_path) {
      setCustomDbPath('');
      setUsedbPath(false);
    } else {
      try {
        const selected = await open({
          directory: false,
          multiple: false,
          defaultPath: "/",
          filters: [{
            name: "Database",
            extensions: ["db"]
          }]
        });

        if (selected === null) {
          console.log("Nothing selected");
          // No dir selected
        } else {
          setCustomDbPath(selected);
          setUsedbPath(true);
        }
      } catch (error) {
        console.error("Error with FilePicker: ", error);
      }
    }
  }

  async function handleAddPatchFile() {
    try {
      const selected_file = await open({
        directory: false,
        multiple: false,
        defaultPath: "/"
      });

      if (selected_file === null) {
        console.log("Nothing selected");
        // No dir selected
      } else {
        console.log("Selected file: ", selected_file);

        if (typeof window !== "undefined") {
          invoke("patch", { patchfile: selected_file })
            .then((output) => {
              console.log("OUTPUT: ", output);
              const ReactSwal = withReactContent(Swal);
              ReactSwal.fire({
                icon: "success",
                title: "Patch file applied",
                text: "Inserted: " + output[0] + " | Removed: " + output[1] + " | Skipped: " + output[2],
              })
            })
            .catch((err) => console.error(err))
        }
      }
    } catch (error) {
      console.error("Error with FilePicker: ", error);
    }
  }

  /**
   * Function to save the data to the backend
   * It basically stringifys the data and sends it to the backend using Tauri.
   * The data is then saved in a local file on the device
   */
  const saveSettings = () => {
    const jsonData = {
      hashes_in_db: hash_count,
      last_db_update: unformatted_date,
      logging_is_active: logging,
      obfuscated_is_active: obfuscated,
      db_location: custom_db_path,
      scan_dir: scan_dir,
      ignored_hashes: ignored_hashes,
      mirror: mirror
    }
    const jsonString = JSON.stringify(jsonData);
    console.log("Client sends: ", jsonData);

    if (typeof window !== "undefined") {

      invoke("save_config_fe", { contents: jsonString })
        .then((output) => {
          const parsedData = JSON.parse(output);
          console.log("Server answer: ", parsedData);
        })
        .catch((err) => console.error(err))
    }
  }

  useEffect(() => {
    // Event listener for the check state
    const checkState = (event) => {
      console.log("Check: ", event.payload);
      setTitle(t('db_update_stage_check'));
      setShowProg(false);
    };
    // Event listener for the index state
    const indexState = (event) => {
      console.log("Index: ", event.payload);
      setTitle(t('db_update_stage_index'));
      setShowProg(false);
    };
    // Event listener for the download state
    const downloadState = (event) => {
      console.log("Download: ", event.payload);
      setProgress(event.payload);
      setTitle(t('db_update_stage_download'));
      setShowProg(true);
    };
    // Event listener for the install state
    const installState = (event) => {
      console.log("Install: ", event.payload);
      setProgress(event.payload);
      setTitle(t('db_update_stage_install'));
      setShowProg(true);
    };

    // Backend can also send error instead of the progress
    const errorState = (event) => {
      console.error(event);
      localStorage.setItem("errorOccurred", 'true');
      // Returns to the Home page with an error statements that will be displayed there
      router.push({
        pathname: '/',
        query: { scanner_error: event.payload }
      })
    };

    // Starts listening for incoming signals emited from the backend
    // chck - Check State
    // idx - Index State
    // dwld - Download State
    // ins - Install State 
    // err - Error State
    const startListening = async () => {
      await listen('chck', checkState);
      await listen('dwld', downloadState);
      await listen('ins', installState);
      await listen('idx', indexState);
      await listen('err', errorState);
    };

    startListening();

    // Clean up function to remove the event listener when the component unmounts
    return () => {
      removeEventListener('chck', checkState);
      removeEventListener('idx', indexState);
      removeEventListener('dwld', downloadState);
      removeEventListener('ins', installState);
      removeEventListener('err', errorState);
    };
  }, [router])

  useEffect(() => {
    if (typeof window !== "undefined") {
      invoke("get_hash_count_fe", {})
        .then((output) => {
          console.log("Hash count: ", output);
          setCount(output);
        })
        .catch((err) => console.error(err))

      // Tries to create the config file on the backend, which returns the new created data
      // or the config found. This data then updates the frontend and is displayed
      invoke("load_config_fe", {})
        .then((output) => {
          const parsedData = JSON.parse(output);
          console.log("Loaded config: ", parsedData);
          if (parsedData.last_db_update != "Never") {
            setUnformattedDate(parsedData.last_db_update);
            setDate(getDate(parseInt(parsedData.last_db_update)));
          }
          setLogging(parsedData.logging_is_active);
          setObfuscated(parsedData.obfuscated_is_active);
          setCustomDbPath(parsedData.db_location);
          setUsedbPath(parsedData.db_location.length > 0);
          setScanDir(parsedData.scan_dir);
          setIgnoredHashes(parsedData.ignored_hashes);
          setMirror(parsedData.mirror);
        })
        .catch((err) => console.error(err))
    }
  }, []);

  const download_log_file = async () => {
    if (typeof window !== "undefined") {
      invoke("download_logs")
        .then((output) => {
          console.log("Log path: ", output);
          const ReactSwal = withReactContent(Swal);
          ReactSwal.fire({
            icon: "success",
            title: t('logs_download_dialog'),
            text: t('logs_download_dialog_text') + output,
          })
        })
        .catch((err) => console.error(err))
    }
  }
  /**
   * Function to update the DB from the Settings page. 
   */
  const updating = async () => {
    if (typeof window !== "undefined") {
      // Creates a pop-up with an indefinite loading animation
      const ReactSwal = withReactContent(Swal);
      ReactSwal.fire({
        title: <p id="dyna-title" className="m-auto w-fit text-xl">{title}</p>,
        text: t('update_db_loading_val'),
        html: <div id="dyna-prog" className="m-auto w-fit">{progress}</div>,
        allowOutsideClick: false,
        showConfirmButton: false,
        allowEscapeKey: false,
        allowEnterKey: false,
        showCancelButton: false,
        didOpen: () => {
          const interval = setInterval(() => {
            const dynamicProgressElement = document.getElementById('dyna-prog');
            if (dynamicProgressElement && !showProgRef.current) {
              // Hide the progress element if the updater is not running
              dynamicProgressElement.style.display = 'none';
            } else if (dynamicProgressElement) {
              // Show the progress element if the updater is running
              dynamicProgressElement.style.display = 'block';
              dynamicProgressElement.textContent = 'Progress: ' + progressRef.current + '%';
            }
            const dynamicTitleElement = document.getElementById('dyna-title');
            if (dynamicTitleElement) {
              if (dynamicTitleElement.textContent != titleRef.current) {
                dynamicTitleElement.textContent = titleRef.current;
              }
            }
          }, 100);

          ReactSwal.getPopup().addEventListener('close', () => {
            clearInterval(interval);
          });
        },
      })

      invoke("update_database")
        .then((message) => {
          // If the update was successfull, update the data
          ReactSwal.close(); // Close the SweetAlert
          console.log(message);
          setCount(Number(message));
          Swal.fire(t('update_db_completed'), t('update_db_completed_val'), "success");
        })
        .catch((error) => {
          console.error(error);
          ReactSwal.close(); // Close the SweetAlert
          Swal.fire(t('update_db_failed'), t('update_db_failed_val') + ": " + error, "error");
        });
    } else {
      console.error("Nextjs not in client mode!");
      Swal.fire(t('client_mode_error'), t('client_mode_error_val'), "error");
    }
  }

  const getDate = (unformatted_date) => {
    const today = new Date(unformatted_date);
    console.log("Today: ", today);
    const date = today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear();
    const hours = today.getHours().toString().padStart(2, '0');
    const minutes = today.getMinutes().toString().padStart(2, '0');
    const time = hours + ":" + minutes;
    const dateTime = date + ' ' + time;
    return dateTime;
  }

  useEffect(() => {
    // Update the mutable ref when the progress state changes
    progressRef.current = progress;
  }, [progress]);

  useEffect(() => {
    // Update the mutable ref when the title changes
    titleRef.current = title;
  }, [title]);

  useEffect(() => {
    // Update the mutable ref when we want to show the progress of the updater
    showProgRef.current = showProg;
  }, [showProg]);


  return (
    <>
      <Head>
        <title>{t('settings_title')}</title>
      </Head>
      <div className="align-middle">
        <button
          onClick={backHome}
          type="button"
          className="inline-block align-middle px-6 py-2.5 m-2 bg-mainred text-white font-medium text-xs leading-tight uppercase rounded shadow-md"
        >
          <FontAwesomeIcon
            icon={faHome}
            size="1x"
            className="pr-1"
          />
          {t('back_btn')}
        </button>
        <h1 className="inline-block align-middle p-2 font-medium leading-tight text-5xl mt-0 mb-2 text-mainred">
          {t('settings_title')}
        </h1>
      </div>

      <SettingComp
        title={t('update_db')}
        short={t('update_db_val')}
        short2={`${t('update_db_1')}: ${hash_count} | ${t('update_db_2')}: ${updated_date}`}
        icon={faWrench}
        action={updating}
        action_val={t('update_db_btn')}
        isOn={false}
      />

      <SettingComp
        title={t('activate_logs')}
        short={t('activate_logs_val')}
        icon={faFileLines}
        isOn={logging}
        setIsOn={setLogging}
      />

      <SettingComp
        title={t('obfuscated_mode')}
        short={t('obfuscated_mode_val')}
        icon={faUserNinja}
        isOn={obfuscated}
        setIsOn={setObfuscated}
      />

      <SettingComp
        title={t('custom_db')}
        short={t('custom_db_val')}
        short2={`${t('custom_db_1')}: ${use_db_path ? custom_db_path : `${t('custom_db_2')}`}`}
        icon={faDatabase}
        isOn={use_db_path}
        setIsOn={handleSetCustomDBPath}
      />

      <SettingComp
        title={t('file_dialog_opt')}
        short={t('file_dialog_opt_val')}
        short2={t('file_dialog_opt_val2')}
        icon={faFileZipper}
        isOn={scan_dir}
        setIsOn={setScanDir}
      />

      <IgnoredHashComp
        title={t('ignore_sign_title')}
        short={t('ignore_sign_val')}
        hashes={ignored_hashes}
        icon={faFingerprint}
        setHashes={setIgnoredHashes}
      />

      <SettingComp
        title={'Add patch file'}
        short={'Allows to patch the DB with custom data'}
        short2={'Use: https://github.com/Raspirus/signature-builder'}
        icon={faGears}
        isOn={false}
        action={handleAddPatchFile}
        action_val={'Add Patch'}
      />

      <SettingComp
        title={"Download logs"}
        short={"Download logs from the backend"}
        icon={faHistory}
        action={download_log_file}
        action_val={"Download"}
        isOn={false}
      />

      <SettingComp
        title={"Mirror website"}
        short={"Location where we download the signatures from"}
        short2={mirror}
        icon={faLink}
        isOn={navigator.onLine}
        setIsOn={function () { }}
      />
    </>
  );
}