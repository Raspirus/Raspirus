var searchIndex = JSON.parse('{\
"app":{"doc":"","t":[3,0,11,11,11,11,11,11,11,11,11,11,11,5,5,12,12,11,5,11,11,11,11,0,0,0,3,11,11,11,11,12,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,3,11,11,11,12,11,11,12,11,11,11,11,12,12,11,12,11,11,11,11,11],"n":["UsbDevice","backend","borrow","borrow_mut","deref","deref_mut","deserialize","drop","fmt","from","from_command","init","into","list_usb_drives","main","name","path","serialize","start_scanner","try_from","try_into","type_id","vzip","db_ops","file_log","file_scanner","DBOps","_remove_hash","borrow","borrow_mut","count_hashes","db_conn","db_file","deref","deref_mut","download_file","download_files","drop","file_exists","file_nr","from","get_db_files","get_diff_file","get_file_list","hash_exists","init","init_table","insert_hashes","into","new","try_from","try_into","type_id","update_db","vzip","FileLog","borrow","borrow_mut","create_file","deref","deref_mut","drop","file","from","init","into","log","new","try_from","try_into","type_id","vzip","FileScanner","borrow","borrow_mut","create_hash","db_conn","deref","deref_mut","dirty_files","drop","from","init","into","log","max_ram","new","scanloc","search_files","try_from","try_into","type_id","vzip"],"q":["app","","","","","","","","","","","","","","","","","","","","","","","app::backend","","","app::backend::db_ops","","","","","","","","","","","","","","","","","","","","","","","","","","","","","app::backend::file_log","","","","","","","","","","","","","","","","","app::backend::file_scanner","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Lists the USB drives attached to the system.","","","","","Starts the scanner for the given path and updates the …","","","","","","","","","Removes the specified hash from the <code>signatures</code> table.","","","Returns the number of hashes in the <code>signatures</code> table.","","","","","Downloads the specified file and returns its content and …","Downloads the specified files and inserts their hashes …","","Returns whether the file with the specified file number …","","Returns the argument unchanged.","Returns a vector of the file numbers of the files that are …","Returns a list of file numbers for which there are no …","Returns the file numbers of the files that are present …","Returns true or false depending on if the given hash gets …","","Initializes the <code>signatures</code> table if it does not exist.","Inserts the given hashes into the signatures table.","Calls <code>U::from(self)</code>.","Returns a new <code>DBOps</code> struct with a connection to the …","","","","Updates the database by downloading any missing files and …","","","","","Creates a new file with the specified name and attempts to …","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Appends the specified <code>hash</code> and <code>fpath</code> to the log file.","Creates a new <code>FileLog</code> struct and attempts to create a new …","","","","","Struct representing a file scanner that is capable of …","","","Creates the MD5 hash of a file.","A reference to a <code>DBOps</code> object that allows the <code>FileScanner</code> …","","","A vector of file paths for files that have been identified …","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","A <code>FileLog</code> object that the <code>FileScanner</code> can use to log …","Sets the amount of RAM the program is allowed to use.","Creates a new <code>FileScanner</code> object.","The file path of the directory that the <code>FileScanner</code> should …","Searches the given file location for infected files.","","","",""],"i":[0,0,2,2,2,2,2,2,2,2,2,2,2,0,0,2,2,2,0,2,2,2,2,0,0,0,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20],"f":[0,0,[[]],[[]],[1],[1],[[],[[3,[2]]]],[1],[[2,4],5],[[]],[6,[[3,[7]]]],[[],1],[[]],[[],[[3,[8,8]]]],[[]],0,0,[2,3],[[8,9,[10,[8]]],[[3,[8]]]],[[],3],[[],3],[[],11],[[]],0,0,0,0,[[12,13],[[3,[14]]]],[[]],[[]],[12,[[3,[15,14]]]],0,0,[1],[1],[16,[[3,[[10,[17]],18]]]],[[12,[17,[16]]]],[1],[16,[[3,[9,18]]]],0,[[]],[12,[[10,[[17,[16]]]]]],[12,[[17,[16]]]],[12,16],[[12,13],[[3,[9,14]]]],[[],1],[12,[[3,[14]]]],[[12,17],[[3,[14]]]],[[]],[13,[[3,[12,14]]]],[[],3],[[],3],[[],11],[12],[[]],0,[[]],[[]],[[19,8]],[1],[1],[1],0,[[]],[[],1],[[]],[[19,8,8]],[8,19],[[],3],[[],3],[[],11],[[]],0,[[]],[[]],[[20,13],[[10,[8]]]],0,[1],[1],0,[1],[[]],[[],1],[[]],0,0,[[13,13],[[3,[20,21]]]],0,[20],[[],3],[[],3],[[],11],[[]]],"p":[[15,"usize"],[3,"UsbDevice"],[4,"Result"],[3,"Formatter"],[6,"Result"],[3,"CommandItem"],[3,"InvokeError"],[3,"String"],[15,"bool"],[4,"Option"],[3,"TypeId"],[3,"DBOps"],[15,"str"],[4,"Error"],[15,"u64"],[15,"i32"],[3,"Vec"],[3,"Error"],[3,"FileLog"],[3,"FileScanner"],[3,"Error"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
